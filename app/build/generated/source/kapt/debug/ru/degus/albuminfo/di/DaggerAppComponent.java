// Generated by Dagger (https://dagger.dev).
package ru.degus.albuminfo.di;

import androidx.fragment.app.FragmentActivity;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import ru.degus.albuminfo.App;
import ru.degus.albuminfo.api.ApiFactory;
import ru.degus.albuminfo.di.modules.ActivityModule;
import ru.degus.albuminfo.di.modules.ActivityModule_GetAlbumViewModelFactory;
import ru.degus.albuminfo.di.modules.ActivityModule_GetMainViewModelFactory;
import ru.degus.albuminfo.di.modules.AlbumRepoModule;
import ru.degus.albuminfo.di.modules.AlbumRepoModule_GetAlbumRepoFactory;
import ru.degus.albuminfo.di.modules.ApiFactoryModule;
import ru.degus.albuminfo.di.modules.ApiFactoryModule_ApiFactoryFactory;
import ru.degus.albuminfo.di.modules.ApiFactoryModule_GetOkHttpClientFactory;
import ru.degus.albuminfo.di.modules.ApiFactoryModule_ITunsUrlFactory;
import ru.degus.albuminfo.fragments.AlbumFragment;
import ru.degus.albuminfo.fragments.AlbumFragment_MembersInjector;
import ru.degus.albuminfo.fragments.MainFragment;
import ru.degus.albuminfo.fragments.MainFragment_MembersInjector;
import ru.degus.albuminfo.repository.album.IAlbumRepo;
import ru.degus.albuminfo.viewmodels.AlbumViewModel;
import ru.degus.albuminfo.viewmodels.AlbumViewModel_MembersInjector;
import ru.degus.albuminfo.viewmodels.MainViewModel;
import ru.degus.albuminfo.viewmodels.MainViewModel_MembersInjector;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<String> iTunsUrlProvider;

  private Provider<OkHttpClient> getOkHttpClientProvider;

  private Provider<ApiFactory> apiFactoryProvider;

  private Provider<IAlbumRepo> getAlbumRepoProvider;

  private DaggerAppComponent(ApiFactoryModule apiFactoryModuleParam,
      AlbumRepoModule albumRepoModuleParam, App application) {

    initialize(apiFactoryModuleParam, albumRepoModuleParam, application);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ApiFactoryModule apiFactoryModuleParam,
      final AlbumRepoModule albumRepoModuleParam, final App application) {
    this.iTunsUrlProvider = ApiFactoryModule_ITunsUrlFactory.create(apiFactoryModuleParam);
    this.getOkHttpClientProvider = ApiFactoryModule_GetOkHttpClientFactory.create(apiFactoryModuleParam);
    this.apiFactoryProvider = DoubleCheck.provider(ApiFactoryModule_ApiFactoryFactory.create(apiFactoryModuleParam, iTunsUrlProvider, getOkHttpClientProvider));
    this.getAlbumRepoProvider = DoubleCheck.provider(AlbumRepoModule_GetAlbumRepoFactory.create(albumRepoModuleParam, apiFactoryProvider));
  }

  @Override
  public ViewModelSubComponent.Builder viewModelSubComponentBuilder() {
    return new ViewModelSubComponentBuilder();}

  @Override
  public ActivitySubComponent.Builder activitySubComponentBuilder() {
    return new ActivitySubComponentBuilder();}

  private static final class Builder implements AppComponent.Builder {
    private App application;

    @Override
    public Builder application(App appModule) {
      this.application = Preconditions.checkNotNull(appModule);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, App.class);
      return new DaggerAppComponent(new ApiFactoryModule(), new AlbumRepoModule(), application);
    }
  }

  private final class ViewModelSubComponentBuilder implements ViewModelSubComponent.Builder {
    @Override
    public ViewModelSubComponent build() {
      return new ViewModelSubComponentImpl();
    }
  }

  private final class ViewModelSubComponentImpl implements ViewModelSubComponent {
    private ViewModelSubComponentImpl() {

    }

    @Override
    public void inject(MainViewModel vModel) {
      injectMainViewModel(vModel);}

    @Override
    public void inject(AlbumViewModel vModel) {
      injectAlbumViewModel(vModel);}

    private MainViewModel injectMainViewModel(MainViewModel instance) {
      MainViewModel_MembersInjector.injectAlbumRepo(instance, DaggerAppComponent.this.getAlbumRepoProvider.get());
      return instance;
    }

    private AlbumViewModel injectAlbumViewModel(AlbumViewModel instance) {
      AlbumViewModel_MembersInjector.injectAlbumRepo(instance, DaggerAppComponent.this.getAlbumRepoProvider.get());
      return instance;
    }
  }

  private final class ActivitySubComponentBuilder implements ActivitySubComponent.Builder {
    private FragmentActivity with;

    @Override
    public ActivitySubComponentBuilder with(FragmentActivity activity) {
      this.with = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public ActivitySubComponent build() {
      Preconditions.checkBuilderRequirement(with, FragmentActivity.class);
      return new ActivitySubComponentImpl(new ActivityModule(), with);
    }
  }

  private final class ActivitySubComponentImpl implements ActivitySubComponent {
    private final FragmentActivity with;

    private final ActivityModule activityModule;

    private ActivitySubComponentImpl(ActivityModule activityModuleParam,
        FragmentActivity withParam) {
      this.with = withParam;
      this.activityModule = activityModuleParam;
    }

    private MainViewModel getMainViewModel() {
      return ActivityModule_GetMainViewModelFactory.getMainViewModel(activityModule, with);}

    private AlbumViewModel getAlbumViewModel() {
      return ActivityModule_GetAlbumViewModelFactory.getAlbumViewModel(activityModule, with);}

    @Override
    public void inject(MainFragment mainFragment) {
      injectMainFragment(mainFragment);}

    @Override
    public void inject(AlbumFragment albumFragment) {
      injectAlbumFragment(albumFragment);}

    private MainFragment injectMainFragment(MainFragment instance) {
      MainFragment_MembersInjector.injectViewModel(instance, getMainViewModel());
      return instance;
    }

    private AlbumFragment injectAlbumFragment(AlbumFragment instance) {
      AlbumFragment_MembersInjector.injectViewModel(instance, getAlbumViewModel());
      return instance;
    }
  }
}
